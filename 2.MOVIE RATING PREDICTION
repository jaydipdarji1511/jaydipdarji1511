{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1DS4x2Sdu8wEKY4tXi-UTQExArdQPkinz","timestamp":1691348654625}],"authorship_tag":"ABX9TyMTr2mEL5nW/e74n15raCtv"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **CODESOFT INTERNSHIP**"],"metadata":{"id":"yWvj70zly289"}},{"cell_type":"markdown","source":["# **DOMAIN-DATA SCIENCE**"],"metadata":{"id":"dDPbd660zMPc"}},{"cell_type":"markdown","source":["# **NAME-DARJI JAYDIP**"],"metadata":{"id":"HUGfk2TPzXKU"}},{"cell_type":"markdown","source":["# **TASK -2 MOVIE RATING PREDICTION WITH PYTHON**"],"metadata":{"id":"vauqcX3BzcTN"}},{"cell_type":"markdown","source":["# **--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------**"],"metadata":{"id":"mdx0t-7Eyp9O"}},{"cell_type":"markdown","source":["# **STEP - 1 CREAT A PROBLEM STATMENT**\n","Build a model that predicts the rating of a movie based on\n","features like genre, director, and actors. You can use regression\n","techniques to tackle this problem.\n","\n","The goal is to analyze historical movie data and develop a model\n","that accurately estimates the rating given to a movie by users or\n","critics.\n","\n","Movie Rating Prediction project enables you to explore data\n","analysis, preprocessing, feature engineering, and machine\n","learning modeling techniques. It provides insights into the factors\n","that influence movie ratings and allows you to build a model that\n","can estimate the ratings of movies accurately.\n","\n","\n","\n"],"metadata":{"id":"IteNM3fWNlCx"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"Du-O0CEVty6u","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1691520941924,"user_tz":-330,"elapsed":5799,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"5c3526f4-6d40-4bff-bf95-7e6e1266aacb"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"markdown","source":["# **STEP-2 IMPORTING LIBRARIES**"],"metadata":{"id":"Wf44fhIoN7_c"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import os\n","import random as rnd\n","import seaborn as sns\n","%matplotlib inline\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.svm import SVC, LinearSVC\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.linear_model import Perceptron\n","from sklearn.linear_model import SGDClassifier\n","from sklearn.tree import DecisionTreeClassifier"],"metadata":{"id":"g2Y9oHBdOFMN","executionInfo":{"status":"ok","timestamp":1691520948751,"user_tz":-330,"elapsed":816,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}}},"execution_count":19,"outputs":[]},{"cell_type":"markdown","source":["# **STEP-3 IMPORTING MOVIE DATA**"],"metadata":{"id":"d2UEuH09OsoZ"}},{"cell_type":"code","source":["print(os.listdir());"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kHX0wyVz7_9l","executionInfo":{"status":"ok","timestamp":1691520957064,"user_tz":-330,"elapsed":14,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"b679cfb3-7751-40b5-ac93-3b1ea6913a63"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["['.config', '.ipynb_checkpoints', 'movies.dat', 'drive', 'ratings.dat', 'users.dat', 'sample_data']\n"]}]},{"cell_type":"code","source":["import chardet\n","with open(\"movies.dat\", 'rb') as rawdata:\n","    result = chardet.detect(rawdata.read(1000000))\n","result"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tqZ41FAJH_Pc","executionInfo":{"status":"ok","timestamp":1691520961726,"user_tz":-330,"elapsed":1870,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"537dc212-586c-46ff-f223-a7249f2c27da"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'encoding': 'ISO-8859-1', 'confidence': 0.73, 'language': ''}"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["df_movie = pd.read_csv(\"movies.dat\", sep=\"::\",engine=\"python\" ,encoding='ISO-8859-1')"],"metadata":{"id":"vwvDODeWIF3H","executionInfo":{"status":"ok","timestamp":1691520965094,"user_tz":-330,"elapsed":728,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["df_movie.columns =['MovieIDs','MovieName','Category']\n","df_movie.dropna(inplace=True)\n","df_movie.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"v7LbFgiEJdze","executionInfo":{"status":"ok","timestamp":1691520968116,"user_tz":-330,"elapsed":693,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"fb051be0-ce57-415d-a83b-21124461949b"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   MovieIDs                           MovieName                      Category\n","0         2                      Jumanji (1995)  Adventure|Children's|Fantasy\n","1         3             Grumpier Old Men (1995)                Comedy|Romance\n","2         4            Waiting to Exhale (1995)                  Comedy|Drama\n","3         5  Father of the Bride Part II (1995)                        Comedy\n","4         6                         Heat (1995)         Action|Crime|Thriller"],"text/html":["\n","\n","  <div id=\"df-37eea102-6c52-4246-a268-29b3c0482bc0\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MovieIDs</th>\n","      <th>MovieName</th>\n","      <th>Category</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>Jumanji (1995)</td>\n","      <td>Adventure|Children's|Fantasy</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3</td>\n","      <td>Grumpier Old Men (1995)</td>\n","      <td>Comedy|Romance</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4</td>\n","      <td>Waiting to Exhale (1995)</td>\n","      <td>Comedy|Drama</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5</td>\n","      <td>Father of the Bride Part II (1995)</td>\n","      <td>Comedy</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6</td>\n","      <td>Heat (1995)</td>\n","      <td>Action|Crime|Thriller</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-37eea102-6c52-4246-a268-29b3c0482bc0')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-75100d15-5cc5-4033-829f-b9b7ab19173c\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-75100d15-5cc5-4033-829f-b9b7ab19173c')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-75100d15-5cc5-4033-829f-b9b7ab19173c button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-37eea102-6c52-4246-a268-29b3c0482bc0 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-37eea102-6c52-4246-a268-29b3c0482bc0');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","source":["# **STEP-4 IMPORTING RATING DATA**"],"metadata":{"id":"80Vse38mZgTE"}},{"cell_type":"code","source":["import chardet\n","with open(\"ratings.dat\", 'rb') as rawdata:\n","    result = chardet.detect(rawdata.read(1000000))\n","result"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VtFzHjS2axfA","executionInfo":{"status":"ok","timestamp":1691520975459,"user_tz":-330,"elapsed":456,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"1eb518b7-32c7-4ff9-f522-56c299759e7f"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'encoding': 'ascii', 'confidence': 1.0, 'language': ''}"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["df_rating = pd.read_csv(\"ratings.dat\", sep=\"::\",engine=\"python\" )"],"metadata":{"id":"ZiDx9E9NcNiC","executionInfo":{"status":"ok","timestamp":1691520982100,"user_tz":-330,"elapsed":2462,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["df_rating.columns =['ID','MovieID','Rating','Timestamp']\n","df_rating.dropna(inplace=True)\n","df_rating.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"W6F8ZZ0Tctfx","executionInfo":{"status":"ok","timestamp":1691520985344,"user_tz":-330,"elapsed":41,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"d925adea-3e9f-42b4-c754-fe3caf820e34"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   ID  MovieID  Rating  Timestamp\n","0   1      661       3  978302109\n","1   1      914       3  978301968\n","2   1     3408       4  978300275\n","3   1     2355       5  978824291\n","4   1     1197       3  978302268"],"text/html":["\n","\n","  <div id=\"df-f043b2dd-4f87-40b6-bc49-ae23ed34bbef\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>MovieID</th>\n","      <th>Rating</th>\n","      <th>Timestamp</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>661</td>\n","      <td>3</td>\n","      <td>978302109</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>914</td>\n","      <td>3</td>\n","      <td>978301968</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3408</td>\n","      <td>4</td>\n","      <td>978300275</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>2355</td>\n","      <td>5</td>\n","      <td>978824291</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1197</td>\n","      <td>3</td>\n","      <td>978302268</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f043b2dd-4f87-40b6-bc49-ae23ed34bbef')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-9e801f11-d5ef-421f-aad2-064e9d7dda33\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9e801f11-d5ef-421f-aad2-064e9d7dda33')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-9e801f11-d5ef-421f-aad2-064e9d7dda33 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f043b2dd-4f87-40b6-bc49-ae23ed34bbef button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f043b2dd-4f87-40b6-bc49-ae23ed34bbef');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","source":["# **STEP-5 IMPORTING USERS DATA**"],"metadata":{"id":"sdup78A8emcY"}},{"cell_type":"code","source":["import chardet\n","with open(\"users.dat\", 'rb') as rawdata:\n","    result = chardet.detect(rawdata.read(1000000))\n","result"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_uESvGQgfdqq","executionInfo":{"status":"ok","timestamp":1691520995662,"user_tz":-330,"elapsed":977,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"2520e710-d944-4ac3-fde5-11c38eb5575e"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'encoding': 'ascii', 'confidence': 1.0, 'language': ''}"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["df_user = pd.read_csv(\"users.dat\", sep=\"::\",engine=\"python\" ,encoding='ascii')"],"metadata":{"id":"ZyCXk_0Ue8xk","executionInfo":{"status":"ok","timestamp":1691520998775,"user_tz":-330,"elapsed":400,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["df_user.columns =['UserID','Gender','Age','Occupation','Zip-code']\n","df_user.dropna(inplace=True)\n","df_user.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"77kRZr0Nf3xF","executionInfo":{"status":"ok","timestamp":1691521001685,"user_tz":-330,"elapsed":29,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"2d2cc780-d0a8-448c-eaaa-334d84572442"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   UserID Gender  Age  Occupation Zip-code\n","0       2      M   56          16    70072\n","1       3      M   25          15    55117\n","2       4      M   45           7    02460\n","3       5      M   25          20    55455\n","4       6      F   50           9    55117"],"text/html":["\n","\n","  <div id=\"df-3b3a69a2-981c-4c1e-ab2e-aca3cb5c2e90\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>UserID</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>Occupation</th>\n","      <th>Zip-code</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>M</td>\n","      <td>56</td>\n","      <td>16</td>\n","      <td>70072</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3</td>\n","      <td>M</td>\n","      <td>25</td>\n","      <td>15</td>\n","      <td>55117</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4</td>\n","      <td>M</td>\n","      <td>45</td>\n","      <td>7</td>\n","      <td>02460</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5</td>\n","      <td>M</td>\n","      <td>25</td>\n","      <td>20</td>\n","      <td>55455</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6</td>\n","      <td>F</td>\n","      <td>50</td>\n","      <td>9</td>\n","      <td>55117</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3b3a69a2-981c-4c1e-ab2e-aca3cb5c2e90')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-ddef3fa2-b94e-4ca2-bf70-8da186710e94\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ddef3fa2-b94e-4ca2-bf70-8da186710e94')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-ddef3fa2-b94e-4ca2-bf70-8da186710e94 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3b3a69a2-981c-4c1e-ab2e-aca3cb5c2e90 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3b3a69a2-981c-4c1e-ab2e-aca3cb5c2e90');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["df = pd.concat([df_movie, df_rating, df_user] , axis=1)\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":337},"id":"4OnNVvzMwY-t","executionInfo":{"status":"ok","timestamp":1691521010783,"user_tz":-330,"elapsed":829,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"eb319df2-738a-4cba-c116-e9c4c69cf04f"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   MovieIDs                           MovieName                      Category  \\\n","0       2.0                      Jumanji (1995)  Adventure|Children's|Fantasy   \n","1       3.0             Grumpier Old Men (1995)                Comedy|Romance   \n","2       4.0            Waiting to Exhale (1995)                  Comedy|Drama   \n","3       5.0  Father of the Bride Part II (1995)                        Comedy   \n","4       6.0                         Heat (1995)         Action|Crime|Thriller   \n","\n","   ID  MovieID  Rating  Timestamp  UserID Gender   Age  Occupation Zip-code  \n","0   1      661       3  978302109     2.0      M  56.0        16.0    70072  \n","1   1      914       3  978301968     3.0      M  25.0        15.0    55117  \n","2   1     3408       4  978300275     4.0      M  45.0         7.0    02460  \n","3   1     2355       5  978824291     5.0      M  25.0        20.0    55455  \n","4   1     1197       3  978302268     6.0      F  50.0         9.0    55117  "],"text/html":["\n","\n","  <div id=\"df-2fce3f10-70a4-41db-8ea3-f97b623e5eb8\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MovieIDs</th>\n","      <th>MovieName</th>\n","      <th>Category</th>\n","      <th>ID</th>\n","      <th>MovieID</th>\n","      <th>Rating</th>\n","      <th>Timestamp</th>\n","      <th>UserID</th>\n","      <th>Gender</th>\n","      <th>Age</th>\n","      <th>Occupation</th>\n","      <th>Zip-code</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2.0</td>\n","      <td>Jumanji (1995)</td>\n","      <td>Adventure|Children's|Fantasy</td>\n","      <td>1</td>\n","      <td>661</td>\n","      <td>3</td>\n","      <td>978302109</td>\n","      <td>2.0</td>\n","      <td>M</td>\n","      <td>56.0</td>\n","      <td>16.0</td>\n","      <td>70072</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3.0</td>\n","      <td>Grumpier Old Men (1995)</td>\n","      <td>Comedy|Romance</td>\n","      <td>1</td>\n","      <td>914</td>\n","      <td>3</td>\n","      <td>978301968</td>\n","      <td>3.0</td>\n","      <td>M</td>\n","      <td>25.0</td>\n","      <td>15.0</td>\n","      <td>55117</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.0</td>\n","      <td>Waiting to Exhale (1995)</td>\n","      <td>Comedy|Drama</td>\n","      <td>1</td>\n","      <td>3408</td>\n","      <td>4</td>\n","      <td>978300275</td>\n","      <td>4.0</td>\n","      <td>M</td>\n","      <td>45.0</td>\n","      <td>7.0</td>\n","      <td>02460</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5.0</td>\n","      <td>Father of the Bride Part II (1995)</td>\n","      <td>Comedy</td>\n","      <td>1</td>\n","      <td>2355</td>\n","      <td>5</td>\n","      <td>978824291</td>\n","      <td>5.0</td>\n","      <td>M</td>\n","      <td>25.0</td>\n","      <td>20.0</td>\n","      <td>55455</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6.0</td>\n","      <td>Heat (1995)</td>\n","      <td>Action|Crime|Thriller</td>\n","      <td>1</td>\n","      <td>1197</td>\n","      <td>3</td>\n","      <td>978302268</td>\n","      <td>6.0</td>\n","      <td>F</td>\n","      <td>50.0</td>\n","      <td>9.0</td>\n","      <td>55117</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2fce3f10-70a4-41db-8ea3-f97b623e5eb8')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-fd38a973-1d60-46c8-b23d-ff9027e5b8c3\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fd38a973-1d60-46c8-b23d-ff9027e5b8c3')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-fd38a973-1d60-46c8-b23d-ff9027e5b8c3 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2fce3f10-70a4-41db-8ea3-f97b623e5eb8 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2fce3f10-70a4-41db-8ea3-f97b623e5eb8');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":30}]},{"cell_type":"markdown","source":["# **STEP-6 VISUALIZATION THE DATA**"],"metadata":{"id":"wB3uKc4ViVOv"}},{"cell_type":"code","source":["df['Age'].value_counts().plot(kind='barh',alpha=0.7,figsize=(10,10))\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":830},"id":"vMDUfEw2x2DA","executionInfo":{"status":"ok","timestamp":1691521035946,"user_tz":-330,"elapsed":711,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"f882e593-9eee-4289-fa58-195a5a798c51"},"execution_count":31,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1000 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["df.Age.plot.hist(bins=25)\n","plt.title(\"Distribution of users' ages\")\n","plt.ylabel('count of users')\n","plt.xlabel('Age')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"id":"PU33FwbZxMVZ","executionInfo":{"status":"ok","timestamp":1691521045708,"user_tz":-330,"elapsed":559,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"1ca13afc-4340-4931-a0df-cc3ade63562a"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'Age')"]},"metadata":{},"execution_count":32},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["labels = ['0-9', '10-19', '20-29', '30-39', '40-49', '50-59', '60-69', '70-79']\n","df['age_group'] = pd.cut(df.Age, range(0, 81, 10), right=False, labels=labels)\n","df[['Age', 'age_group']].drop_duplicates()[:10]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"2AdhqnGoyUxs","executionInfo":{"status":"ok","timestamp":1691521053224,"user_tz":-330,"elapsed":597,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"a1e49a5d-cab3-48a4-fde5-093a470171ce"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Age age_group\n","0     56.0     50-59\n","1     25.0     20-29\n","2     45.0     40-49\n","4     50.0     50-59\n","5     35.0     30-39\n","16    18.0     10-19\n","17     1.0       0-9\n","6039   NaN       NaN"],"text/html":["\n","\n","  <div id=\"df-2fb403ef-a2c1-4b20-b900-ea8196c4ab4b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age</th>\n","      <th>age_group</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>56.0</td>\n","      <td>50-59</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>25.0</td>\n","      <td>20-29</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>45.0</td>\n","      <td>40-49</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>50.0</td>\n","      <td>50-59</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>35.0</td>\n","      <td>30-39</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>18.0</td>\n","      <td>10-19</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>1.0</td>\n","      <td>0-9</td>\n","    </tr>\n","    <tr>\n","      <th>6039</th>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2fb403ef-a2c1-4b20-b900-ea8196c4ab4b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-634724ed-a722-4e16-b87f-bb2e7d252fee\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-634724ed-a722-4e16-b87f-bb2e7d252fee')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-634724ed-a722-4e16-b87f-bb2e7d252fee button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2fb403ef-a2c1-4b20-b900-ea8196c4ab4b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2fb403ef-a2c1-4b20-b900-ea8196c4ab4b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":33}]},{"cell_type":"markdown","source":["# **overall rating by users**"],"metadata":{"id":"wucuHJ3GzZdb"}},{"cell_type":"code","source":["df['Rating'].value_counts().plot(kind='bar',alpha=0.7,figsize=(10,10))\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":825},"id":"RxXlrX9YBzd-","executionInfo":{"status":"ok","timestamp":1691521061270,"user_tz":-330,"elapsed":1359,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"aacd5eea-87f1-4e0f-f637-36ecb81c8535"},"execution_count":34,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1000 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["groupedby_movieName = df.groupby('MovieName')\n","groupedby_rating = df.groupby('Rating')\n","groupedby_uid = df.groupby('UserID')"],"metadata":{"id":"D0eleQiFJh8O","executionInfo":{"status":"ok","timestamp":1691521068997,"user_tz":-330,"elapsed":3,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["movies = df.groupby('MovieName').size().sort_values(ascending=True)[:1000]\n","print(movies)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zk6tWgvLJoiq","executionInfo":{"status":"ok","timestamp":1691521072049,"user_tz":-330,"elapsed":14,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"30a51383-7d89-4cc0-ed77-1bba4ce8e830"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["MovieName\n","$1,000,000 Duck (1971)                   1\n","Only Angels Have Wings (1939)            1\n","Only You (1994)                          1\n","Open Season (1996)                       1\n","Open Your Eyes (Abre los ojos) (1997)    1\n","                                        ..\n","Toy Story 2 (1999)                       1\n","Toys (1992)                              1\n","Total Eclipse (1995)                     1\n","Trading Places (1983)                    1\n","Tom & Viv (1994)                         1\n","Length: 1000, dtype: int64\n"]}]},{"cell_type":"code","source":["ToyStory_data = groupedby_movieName.get_group('Toy Story 2 (1999)')\n","ToyStory_data.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZYXBUKjvJ2cg","executionInfo":{"status":"ok","timestamp":1691521076587,"user_tz":-330,"elapsed":16,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"7ea1d515-f9cf-46d5-ba8c-889d65815458"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1, 13)"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["plt.figure(figsize=(10,10))\n","plt.scatter(ToyStory_data['MovieName'],ToyStory_data['Rating'])\n","plt.title('Plot showing  the user rating of the movie “Toy Story”')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":853},"id":"8d36aABwJ-Q8","executionInfo":{"status":"ok","timestamp":1691521085532,"user_tz":-330,"elapsed":822,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"5c351f82-8f6d-4629-ca9d-47804e70b56f"},"execution_count":38,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1000 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# **THE VIEWER OF THE MOVIE 'TOY STORY ' BY AGE GROUP**"],"metadata":{"id":"KuEYHrxC5i-H"}},{"cell_type":"code","source":["ToyStory_data[['MovieName','age_group']]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"SKLgWYIfLVg2","executionInfo":{"status":"ok","timestamp":1691521096103,"user_tz":-330,"elapsed":748,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"c0094873-6a87-4349-f185-836bce77b80d"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               MovieName age_group\n","3044  Toy Story 2 (1999)       0-9"],"text/html":["\n","\n","  <div id=\"df-eb394d46-62f6-462f-9e10-04b4461f6eda\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MovieName</th>\n","      <th>age_group</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3044</th>\n","      <td>Toy Story 2 (1999)</td>\n","      <td>0-9</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eb394d46-62f6-462f-9e10-04b4461f6eda')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-1891b51b-93da-4207-99b7-619eb95e5a75\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1891b51b-93da-4207-99b7-619eb95e5a75')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-1891b51b-93da-4207-99b7-619eb95e5a75 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-eb394d46-62f6-462f-9e10-04b4461f6eda button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-eb394d46-62f6-462f-9e10-04b4461f6eda');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":39}]},{"cell_type":"markdown","source":["# **TOP 25 MOVIE BY VIEWER RATING**"],"metadata":{"id":"9wDIC5QM6QPM"}},{"cell_type":"code","source":["top_25 = df[25:]\n","top_25['Rating'].value_counts().plot(kind='barh',alpha=0.6,figsize=(7,7))\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":599},"id":"gJaQ1yaZLZBi","executionInfo":{"status":"ok","timestamp":1691521099212,"user_tz":-330,"elapsed":42,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"de8d78f4-e33c-4e3f-ef72-12ffe8b581c0"},"execution_count":40,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 700x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# **RATING DATA OF PARTICULAR USER ID = 3540**"],"metadata":{"id":"XAuQgRhB64gv"}},{"cell_type":"code","source":["userid_2696 = groupedby_uid.get_group(3540)\n","userid_2696[['UserID','Rating']]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"8pXogtqqLtt-","executionInfo":{"status":"ok","timestamp":1691521108350,"user_tz":-330,"elapsed":24,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"4b417033-c873-46f6-f324-a78c176554ef"},"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      UserID  Rating\n","3538  3540.0       2"],"text/html":["\n","\n","  <div id=\"df-b28200f6-bdb6-42c7-b406-6abd887ac94b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>UserID</th>\n","      <th>Rating</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3538</th>\n","      <td>3540.0</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b28200f6-bdb6-42c7-b406-6abd887ac94b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-899646be-c7c3-4630-8454-1dcf15326d8d\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-899646be-c7c3-4630-8454-1dcf15326d8d')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-899646be-c7c3-4630-8454-1dcf15326d8d button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b28200f6-bdb6-42c7-b406-6abd887ac94b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b28200f6-bdb6-42c7-b406-6abd887ac94b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["first_500 = df[500:]\n","first_500.dropna(inplace=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ivr12KyOLz7Q","executionInfo":{"status":"ok","timestamp":1691521116723,"user_tz":-330,"elapsed":899,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"38c688e4-0a86-4dc0-a51c-a8f00d2a9b41"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-42-47ead3a1e407>:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  first_500.dropna(inplace=True)\n"]}]},{"cell_type":"markdown","source":["# **STEP 7 -FEATURES**"],"metadata":{"id":"R-bOVJDf8nc0"}},{"cell_type":"code","source":["features = first_500[['MovieID','Age','Occupation']].values"],"metadata":{"id":"RJJ9_T4HL_rZ","executionInfo":{"status":"ok","timestamp":1691521120467,"user_tz":-330,"elapsed":642,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}}},"execution_count":43,"outputs":[]},{"cell_type":"code","source":["labels = first_500[['Rating']].values"],"metadata":{"id":"wR2L_9nuUiRs","executionInfo":{"status":"ok","timestamp":1691521122823,"user_tz":-330,"elapsed":3,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}}},"execution_count":44,"outputs":[]},{"cell_type":"markdown","source":["# **STEP-8 TRAIN AND TEST THE DATA**"],"metadata":{"id":"hcSU0RP49ATk"}},{"cell_type":"code","source":["train, test, train_labels, test_labels = train_test_split(features,labels,test_size=0.33,random_state=42)"],"metadata":{"id":"Fl_KYqb-U1u4","executionInfo":{"status":"ok","timestamp":1691521126484,"user_tz":-330,"elapsed":433,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}}},"execution_count":45,"outputs":[]},{"cell_type":"markdown","source":["# **STEP-9 HISTOGRAF OF MOVIE**"],"metadata":{"id":"G4gF7Yjm-8WF"}},{"cell_type":"code","source":["df.Age.plot.hist(bins=25)\n","plt.title(\"Movie & Rating\")\n","plt.ylabel('MovieID')\n","plt.xlabel('Rating')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"id":"1DjYbH17VFvE","executionInfo":{"status":"ok","timestamp":1691521134775,"user_tz":-330,"elapsed":1020,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"887b4e92-b230-4944-8c34-d095d45033b4"},"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'Rating')"]},"metadata":{},"execution_count":46},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# **HISTOGRAM OF AGE**"],"metadata":{"id":"38aeJA6H_oUK"}},{"cell_type":"code","source":["df.Age.plot.hist(bins=25)\n","plt.title(\"Age & Rating\")\n","plt.ylabel('Age')\n","plt.xlabel('Rating')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"id":"pqumlg_vVZaG","executionInfo":{"status":"ok","timestamp":1691521143706,"user_tz":-330,"elapsed":23,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"9b77055a-f3e2-4bfd-ad51-f6a9adb51136"},"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'Rating')"]},"metadata":{},"execution_count":47},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# **HISTOGRAF OF OCCUPATION**"],"metadata":{"id":"i5Xz7VRa_7YH"}},{"cell_type":"code","source":["df.Age.plot.hist(bins=25)\n","plt.title(\"Occupation & Rating\")\n","plt.ylabel('Occupation')\n","plt.xlabel('Rating')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"id":"eJT4NCChVsrd","executionInfo":{"status":"ok","timestamp":1691521154671,"user_tz":-330,"elapsed":1003,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"c2143ee6-f5b2-4522-fa05-37bf8af50256"},"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'Rating')"]},"metadata":{},"execution_count":48},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# **STEP-10 MODEL SELECTION**\n","# **LOGISTIC REGRESSION**"],"metadata":{"id":"UMju8CYGAPtv"}},{"cell_type":"code","source":["logreg = LogisticRegression()\n","logreg.fit(train, train_labels)\n","Y_pred = logreg.predict(test)\n","acc_log = round(logreg.score(train, train_labels) * 100, 2)\n","acc_log"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fTr3Nx9iV7ST","executionInfo":{"status":"ok","timestamp":1691521167590,"user_tz":-330,"elapsed":918,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"dd23f3c3-a717-46b0-df3b-9f311d55d5c8"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]},{"output_type":"execute_result","data":{"text/plain":["32.76"]},"metadata":{},"execution_count":49}]},{"cell_type":"markdown","source":["# **SVM MODEL**"],"metadata":{"id":"feoz3brZCQfO"}},{"cell_type":"code","source":["svc = SVC()\n","svc.fit(train, train_labels)\n","Y_pred = svc.predict(test)\n","acc_svc = round(svc.score(train, train_labels) * 100, 2)\n","acc_svc"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pcjzydMqWNKS","executionInfo":{"status":"ok","timestamp":1691521171611,"user_tz":-330,"elapsed":987,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"319d8042-2d75-4e46-bed1-bcd6f97f6501"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["32.94"]},"metadata":{},"execution_count":50}]},{"cell_type":"markdown","source":["# **KNN MODEL**"],"metadata":{"id":"f9gX56jmCyZH"}},{"cell_type":"code","source":["knn = KNeighborsClassifier(n_neighbors = 3)\n","knn.fit(train, train_labels)\n","Y_pred = knn.predict(test)\n","acc_knn = round(knn.score(train, train_labels) * 100, 2)\n","acc_knn"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VMiLsabYWddE","executionInfo":{"status":"ok","timestamp":1691521179004,"user_tz":-330,"elapsed":483,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"64be6e0e-72ec-49a6-b4d9-3309865e6b56"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:215: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  return self._fit(X, y)\n"]},{"output_type":"execute_result","data":{"text/plain":["57.75"]},"metadata":{},"execution_count":51}]},{"cell_type":"markdown","source":["# **NAIVE BAYES MODEL**"],"metadata":{"id":"khMeScI9Dggm"}},{"cell_type":"code","source":["gaussian = GaussianNB()\n","gaussian.fit(train, train_labels)\n","Y_pred = gaussian.predict(test)\n","acc_gaussian = round(gaussian.score(train, train_labels) * 100, 2)\n","acc_gaussian"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"afh9QhO7WqT-","executionInfo":{"status":"ok","timestamp":1691521182308,"user_tz":-330,"elapsed":12,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"03d5273d-ee62-4edb-e0ed-1cf344d715c8"},"execution_count":52,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["32.23"]},"metadata":{},"execution_count":52}]},{"cell_type":"markdown","source":["# **PERCEPTRON MODEL**"],"metadata":{"id":"acjOEMywMC-w"}},{"cell_type":"code","source":["perceptron = Perceptron()\n","perceptron.fit(train, train_labels)\n","Y_pred = perceptron.predict(test)\n","acc_perceptron = round(perceptron.score(train, train_labels) * 100, 2)\n","acc_perceptron"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pW2_czOSW3_1","executionInfo":{"status":"ok","timestamp":1691521190193,"user_tz":-330,"elapsed":628,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"fcef822d-3e54-4972-b8d5-c8e406bafdb4"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["28.61"]},"metadata":{},"execution_count":53}]},{"cell_type":"markdown","source":["# **LINEAR SVC MODEL**"],"metadata":{"id":"FTFe22vUMeT4"}},{"cell_type":"code","source":["linear_svc = LinearSVC()\n","linear_svc.fit(train, train_labels)\n","Y_pred = linear_svc.predict(test)\n","acc_linear_svc = round(linear_svc.score(train, train_labels) * 100, 2)\n","acc_linear_svc"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gHuVIT3LnR1v","executionInfo":{"status":"ok","timestamp":1691521194122,"user_tz":-330,"elapsed":442,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"0c50c3ce-8ff8-4930-e74a-95f9e7d33351"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/svm/_base.py:1244: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["10.82"]},"metadata":{},"execution_count":54}]},{"cell_type":"markdown","source":["# **SGD MODEL**"],"metadata":{"id":"6thznmmCM3cE"}},{"cell_type":"code","source":["sgd = SGDClassifier()\n","sgd.fit(train, train_labels)\n","Y_pred = sgd.predict(test)\n","acc_sgd = round(sgd.score(train, train_labels) * 100, 2)\n","acc_sgd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AD4T1LFFXDR-","executionInfo":{"status":"ok","timestamp":1691521203026,"user_tz":-330,"elapsed":426,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"b6b47cb7-bf1d-4eae-a4d5-e04eec1d418f"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["21.77"]},"metadata":{},"execution_count":55}]},{"cell_type":"markdown","source":["# **DECISION TREE MODEL**"],"metadata":{"id":"R39iISIYNYHl"}},{"cell_type":"code","source":["decision_tree = DecisionTreeClassifier()\n","decision_tree.fit(train, train_labels)\n","Y_pred = decision_tree.predict(test)\n","acc_decision_tree = round(decision_tree.score(train, train_labels) * 100, 2)\n","acc_decision_tree"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9kVkwWaPXVPY","executionInfo":{"status":"ok","timestamp":1691521206493,"user_tz":-330,"elapsed":500,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"3be8ea1f-9e93-4277-9520-fac90dfb70f8"},"execution_count":56,"outputs":[{"output_type":"execute_result","data":{"text/plain":["98.54"]},"metadata":{},"execution_count":56}]},{"cell_type":"markdown","source":["# **RANDOM FOREST MODEL**"],"metadata":{"id":"YpYbRCzzNy4j"}},{"cell_type":"code","source":["random_forest = RandomForestClassifier(n_estimators=100)\n","random_forest.fit(train, train_labels)\n","Y_pred = random_forest.predict(test)\n","random_forest.score(train, train_labels)\n","acc_random_forest = round(random_forest.score(train, train_labels) * 100, 2)\n","acc_random_forest\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0MkPxUgbXdSk","executionInfo":{"status":"ok","timestamp":1691521215098,"user_tz":-330,"elapsed":717,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"826f3a1e-9502-47d5-a77e-494b7162aaef"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-57-4b7394a7e890>:2: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  random_forest.fit(train, train_labels)\n"]},{"output_type":"execute_result","data":{"text/plain":["98.54"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["models = pd.DataFrame({\n","    'Model': ['Support Vector Machines', 'KNN', 'Logistic Regression',\n","              'Random Forest', 'Naive Bayes', 'Perceptron',\n","              'Stochastic Gradient Decent', 'Linear SVC',\n","              'Decision Tree'],\n","    'Score': [acc_svc, acc_knn, acc_log,\n","              acc_random_forest, acc_gaussian, acc_perceptron,\n","              acc_sgd, acc_linear_svc, acc_decision_tree]})\n","models.sort_values(by='Score', ascending=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":331},"id":"QRgB_9RmmWfj","executionInfo":{"status":"ok","timestamp":1691521218233,"user_tz":-330,"elapsed":32,"user":{"displayName":"darji jaydip","userId":"12454986169897035724"}},"outputId":"72f60071-8c46-4743-f261-8447e3b901dd"},"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                        Model  Score\n","3               Random Forest  98.54\n","8               Decision Tree  98.54\n","1                         KNN  57.75\n","0     Support Vector Machines  32.94\n","2         Logistic Regression  32.76\n","4                 Naive Bayes  32.23\n","5                  Perceptron  28.61\n","6  Stochastic Gradient Decent  21.77\n","7                  Linear SVC  10.82"],"text/html":["\n","\n","  <div id=\"df-25fb08f3-4eaa-4580-89e5-1f33c20ddbf7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3</th>\n","      <td>Random Forest</td>\n","      <td>98.54</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>Decision Tree</td>\n","      <td>98.54</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>KNN</td>\n","      <td>57.75</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Support Vector Machines</td>\n","      <td>32.94</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Logistic Regression</td>\n","      <td>32.76</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Naive Bayes</td>\n","      <td>32.23</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Perceptron</td>\n","      <td>28.61</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Stochastic Gradient Decent</td>\n","      <td>21.77</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Linear SVC</td>\n","      <td>10.82</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-25fb08f3-4eaa-4580-89e5-1f33c20ddbf7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-b7c62803-2f27-4fba-aa2b-3d5b530cacbe\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b7c62803-2f27-4fba-aa2b-3d5b530cacbe')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-b7c62803-2f27-4fba-aa2b-3d5b530cacbe button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-25fb08f3-4eaa-4580-89e5-1f33c20ddbf7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-25fb08f3-4eaa-4580-89e5-1f33c20ddbf7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":58}]},{"cell_type":"markdown","source":["# **Random Forest Model And decision Tree model Better Than compare To Other Model.Because Its score Is High 94.54%**"],"metadata":{"id":"7rxPU4QwwlXk"}},{"cell_type":"markdown","source":["# **THANK YOU.......**"],"metadata":{"id":"zQUSz8Q_y2B2"}}]}